// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface ytChannelAbout {
  responseContext:           ResponseContext;
  contents:                  Contents;
  header:                    Header;
  metadata:                  Metadata;
  trackingParams:            string;
  topbar:                    Topbar;
  microformat:               Microformat;
  onResponseReceivedActions: OnResponseReceivedAction[];
  frameworkUpdates:          FrameworkUpdates;
}

export interface Contents {
  twoColumnBrowseResultsRenderer: TwoColumnBrowseResultsRenderer;
}

export interface TwoColumnBrowseResultsRenderer {
  tabs: Tab[];
}

export interface Tab {
  tabRenderer?:           TabRenderer;
  expandableTabRenderer?: ExpandableTabRenderer;
}

export interface ExpandableTabRenderer {
  endpoint: ExpandableTabRendererEndpoint;
  title:    string;
  selected: boolean;
}

export interface ExpandableTabRendererEndpoint {
  clickTrackingParams: string;
  commandMetadata:     EndpointCommandMetadata;
  browseEndpoint:      PurpleBrowseEndpoint;
}

export interface PurpleBrowseEndpoint {
  browseId:         string;
  params:           string;
  canonicalBaseUrl: string;
}

export interface EndpointCommandMetadata {
  webCommandMetadata: PurpleWebCommandMetadata;
}

export interface PurpleWebCommandMetadata {
  url:         string;
  webPageType: WebPageType;
  rootVe:      number;
  apiUrl?:     string;
}

export enum WebPageType {
  WebPageTypeBrowse = "WEB_PAGE_TYPE_BROWSE",
  WebPageTypeChannel = "WEB_PAGE_TYPE_CHANNEL",
  WebPageTypeSearch = "WEB_PAGE_TYPE_SEARCH",
  WebPageTypeUnknown = "WEB_PAGE_TYPE_UNKNOWN",
}

export interface TabRenderer {
  endpoint:       ExpandableTabRendererEndpoint;
  title:          string;
  selected:       boolean;
  trackingParams: string;
  content?:       TabRendererContent;
}

export interface TabRendererContent {
  sectionListRenderer: SectionListRenderer;
}

export interface SectionListRenderer {
  contents:       SectionListRendererContent[];
  trackingParams: string;
}

export interface SectionListRendererContent {
  itemSectionRenderer: ItemSectionRenderer;
}

export interface ItemSectionRenderer {
  contents:       ItemSectionRendererContent[];
  trackingParams: string;
}

export interface ItemSectionRendererContent {
  channelAboutFullMetadataRenderer: ChannelAboutFullMetadataRenderer;
}

export interface ChannelAboutFullMetadataRenderer {
  description:                       Title;
  primaryLinks:                      AryLink[];
  viewCountText:                     Title;
  joinedDateText:                    LivingstoneSouthernWhiteFacedOwl;
  canonicalChannelUrl:               string;
  bypassBusinessEmailCaptcha:        boolean;
  title:                             Title;
  avatar:                            BannerClass;
  country:                           Title;
  showDescription:                   boolean;
  descriptionLabel:                  LivingstoneSouthernWhiteFacedOwl;
  detailsLabel:                      LivingstoneSouthernWhiteFacedOwl;
  primaryLinksLabel:                 LivingstoneSouthernWhiteFacedOwl;
  statsLabel:                        LivingstoneSouthernWhiteFacedOwl;
  countryLabel:                      CountryLabel;
  actionButtons:                     VoiceSearchButton[];
  channelId:                         string;
  onBusinessEmailRevealClickCommand: OnBusinessEmailRevealClickCommand;
}

export interface VoiceSearchDialogRenderer {
  placeholderHeader:              LivingstoneSouthernWhiteFacedOwl;
  promptHeader:                   LivingstoneSouthernWhiteFacedOwl;
  exampleQuery1:                  LivingstoneSouthernWhiteFacedOwl;
  exampleQuery2:                  LivingstoneSouthernWhiteFacedOwl;
  promptMicrophoneLabel:          LivingstoneSouthernWhiteFacedOwl;
  loadingHeader:                  LivingstoneSouthernWhiteFacedOwl;
  connectionErrorHeader:          LivingstoneSouthernWhiteFacedOwl;
  connectionErrorMicrophoneLabel: LivingstoneSouthernWhiteFacedOwl;
  permissionsHeader:              LivingstoneSouthernWhiteFacedOwl;
  permissionsSubtext:             LivingstoneSouthernWhiteFacedOwl;
  disabledHeader:                 LivingstoneSouthernWhiteFacedOwl;
  disabledSubtext:                LivingstoneSouthernWhiteFacedOwl;
  microphoneButtonAriaLabel:      LivingstoneSouthernWhiteFacedOwl;
  exitButton:                     VoiceSearchButton;
  trackingParams:                 string;
  microphoneOffPromptHeader:      LivingstoneSouthernWhiteFacedOwl;
}

export interface PurplePopup {
  menuPopupRenderer?:         PurpleMenuPopupRenderer;
  voiceSearchDialogRenderer?: VoiceSearchDialogRenderer;
}

export interface PurpleOpenPopupAction {
  popup:     PurplePopup;
  popupType: string;
}

export interface PurpleAction {
  clickTrackingParams: string;
  openPopupAction:     PurpleOpenPopupAction;
}

export interface PurpleSignalServiceEndpoint {
  signal:  string;
  actions: PurpleAction[];
}

export interface PurpleServiceEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       CommandCommandMetadata;
  signalServiceEndpoint: PurpleSignalServiceEndpoint;
}

export interface VoiceSearchButtonButtonRenderer {
  style:             Style;
  size:              Size;
  serviceEndpoint?:  PurpleServiceEndpoint;
  icon:              IconImageClass;
  accessibility?:    PurpleAccessibility;
  tooltip?:          string;
  trackingParams:    string;
  accessibilityData: SubscribeAccessibilityClass;
  isDisabled?:       boolean;
}

export interface VoiceSearchButton {
  buttonRenderer: VoiceSearchButtonButtonRenderer;
}

export interface LivingstoneSouthernWhiteFacedOwl {
  runs: PurpleRun[];
}

export interface PurpleRun {
  text: string;
}

export interface PurpleMenuPopupRenderer {
  items: PurpleItem[];
}

export interface PurpleItem {
  toggleMenuServiceItemRenderer?: ToggleMenuServiceItemRenderer;
  menuServiceItemRenderer?:       PurpleMenuServiceItemRenderer;
}

export interface PurpleMenuServiceItemRenderer {
  text:            LivingstoneSouthernWhiteFacedOwl;
  serviceEndpoint: FluffyServiceEndpoint;
  trackingParams:  string;
  command?:        CommandElement;
}

export interface CommandElement {
  clickTrackingParams: string;
  openPopupAction:     FluffyOpenPopupAction;
}

export interface FluffyOpenPopupAction {
  popup:     FluffyPopup;
  popupType: string;
  uniqueId?: string;
  beReused:  boolean;
}

export interface FluffyPopup {
  multiPageMenuRenderer: PopupMultiPageMenuRenderer;
}

export interface PopupMultiPageMenuRenderer {
  trackingParams:     string;
  style:              string;
  showLoadingSpinner: boolean;
}

export interface FluffyServiceEndpoint {
  clickTrackingParams:    string;
  commandMetadata:        OnBusinessEmailRevealClickCommandCommandMetadata;
  signalServiceEndpoint?: DefaultServiceEndpointSignalServiceEndpoint;
  getReportFormEndpoint?: Endpoint;
}

export interface OnBusinessEmailRevealClickCommandCommandMetadata {
  webCommandMetadata: TentacledWebCommandMetadata;
}

export interface TentacledWebCommandMetadata {
  sendPost: boolean;
  apiUrl?:  string;
}

export interface Endpoint {
  params: string;
}

export interface DefaultServiceEndpointSignalServiceEndpoint {
  signal:  string;
  actions: FluffyAction[];
}

export interface FluffyAction {
  clickTrackingParams: string;
  openPopupAction:     TentacledOpenPopupAction;
}

export interface TentacledOpenPopupAction {
  popup:     TentacledPopup;
  popupType: string;
}

export interface TentacledPopup {
  confirmDialogRenderer: PurpleConfirmDialogRenderer;
}

export interface PurpleConfirmDialogRenderer {
  title:           LivingstoneSouthernWhiteFacedOwl;
  trackingParams:  string;
  dialogMessages:  LivingstoneSouthernWhiteFacedOwl[];
  confirmButton:   A11YSkipNavigationButtonClass;
  cancelButton:    A11YSkipNavigationButtonClass;
  primaryIsCancel: boolean;
}

export interface A11YSkipNavigationButtonClass {
  buttonRenderer: A11YSkipNavigationButtonButtonRenderer;
}

export interface A11YSkipNavigationButtonButtonRenderer {
  style:              Style;
  size:               Size;
  text:               LivingstoneSouthernWhiteFacedOwl;
  accessibility?:     PurpleAccessibility;
  trackingParams:     string;
  accessibilityData?: SubscribeAccessibilityClass;
  serviceEndpoint?:   TentacledServiceEndpoint;
  isDisabled?:        boolean;
  command?:           ButtonRendererCommand;
}

export interface PurpleAccessibility {
  label: string;
}

export interface SubscribeAccessibilityClass {
  accessibilityData: PurpleAccessibility;
}

export interface ButtonRendererCommand {
  clickTrackingParams:   string;
  commandMetadata:       CommandCommandMetadata;
  signalServiceEndpoint: CommandSignalServiceEndpoint;
}

export interface CommandCommandMetadata {
  webCommandMetadata: FluffyWebCommandMetadata;
}

export interface FluffyWebCommandMetadata {
  sendPost: boolean;
}

export interface CommandSignalServiceEndpoint {
  signal:  string;
  actions: TentacledAction[];
}

export interface TentacledAction {
  clickTrackingParams: string;
  signalAction:        Signal;
}

export interface Signal {
  signal: string;
}

export interface TentacledServiceEndpoint {
  clickTrackingParams:  string;
  commandMetadata:      OnBusinessEmailRevealClickCommandCommandMetadata;
  flagEndpoint?:        FlagEndpoint;
  unsubscribeEndpoint?: SubscribeEndpoint;
}

export interface FlagEndpoint {
  flagAction: string;
}

export interface SubscribeEndpoint {
  channelIds: string[];
  params:     string;
}

export enum Size {
  SizeDefault = "SIZE_DEFAULT",
}

export enum Style {
  StyleBlueText = "STYLE_BLUE_TEXT",
  StyleDefault = "STYLE_DEFAULT",
  StyleText = "STYLE_TEXT",
}

export interface ToggleMenuServiceItemRenderer {
  defaultText:            LivingstoneSouthernWhiteFacedOwl;
  defaultServiceEndpoint: ServiceEndpoint;
  toggledText:            LivingstoneSouthernWhiteFacedOwl;
  toggledServiceEndpoint: ServiceEndpoint;
  trackingParams:         string;
  isToggled:              boolean;
}

export interface ServiceEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       CommandCommandMetadata;
  signalServiceEndpoint: DefaultServiceEndpointSignalServiceEndpoint;
}

export interface IconImageClass {
  iconType: string;
}

export interface BannerClass {
  thumbnails: AvatarThumbnail[];
}

export interface AvatarThumbnail {
  url:    string;
  width:  number;
  height: number;
}

export interface Title {
  simpleText: string;
}

export interface CountryLabel {
  runs: CountryLabelRun[];
}

export interface CountryLabelRun {
  text:        string;
  deemphasize: boolean;
}

export interface OnBusinessEmailRevealClickCommand {
  clickTrackingParams:        string;
  commandMetadata:            OnBusinessEmailRevealClickCommandCommandMetadata;
  revealBusinessEmailCommand: RevealBusinessEmailCommand;
}

export interface RevealBusinessEmailCommand {
}

export interface AryLink {
  navigationEndpoint: PrimaryLinkNavigationEndpoint;
  icon:               PrimaryLinkIcon;
  title:              Title;
  trackingParams?:    string;
}

export interface PrimaryLinkIcon {
  thumbnails: IconThumbnail[];
}

export interface IconThumbnail {
  url: string;
}

export interface PrimaryLinkNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     EndpointCommandMetadata;
  urlEndpoint:         PurpleURLEndpoint;
}

export interface PurpleURLEndpoint {
  url:      string;
  target:   string;
  nofollow: boolean;
}

export interface FrameworkUpdates {
  entityBatchUpdate: EntityBatchUpdate;
}

export interface EntityBatchUpdate {
  mutations: Mutation[];
  timestamp: Timestamp;
}

export interface Mutation {
  entityKey: string;
  type:      string;
  payload:   Payload;
}

export interface Payload {
  subscriptionStateEntity: SubscriptionStateEntity;
}

export interface SubscriptionStateEntity {
  key:        string;
  subscribed: boolean;
}

export interface Timestamp {
  seconds: string;
  nanos:   number;
}

export interface Header {
  c4TabbedHeaderRenderer: C4TabbedHeaderRenderer;
}

export interface C4TabbedHeaderRenderer {
  channelId:           string;
  title:               string;
  navigationEndpoint:  C4TabbedHeaderRendererNavigationEndpoint;
  avatar:              BannerClass;
  banner:              BannerClass;
  badges:              Badge[];
  headerLinks:         HeaderLinks;
  subscribeButton:     SubscribeButton;
  visitTracking:       VisitTracking;
  subscriberCountText: SubscriberCountText;
  tvBanner:            BannerClass;
  mobileBanner:        BannerClass;
  trackingParams:      string;
}

export interface Badge {
  metadataBadgeRenderer: MetadataBadgeRenderer;
}

export interface MetadataBadgeRenderer {
  icon:              IconImageClass;
  style:             string;
  tooltip:           string;
  trackingParams:    string;
  accessibilityData: PurpleAccessibility;
}

export interface HeaderLinks {
  channelHeaderLinksRenderer: ChannelHeaderLinksRenderer;
}

export interface ChannelHeaderLinksRenderer {
  primaryLinks:   AryLink[];
  secondaryLinks: AryLink[];
}

export interface C4TabbedHeaderRendererNavigationEndpoint {
  clickTrackingParams: string;
  commandMetadata:     EndpointCommandMetadata;
  browseEndpoint:      NavigationEndpointBrowseEndpoint;
}

export interface NavigationEndpointBrowseEndpoint {
  browseId:         string;
  canonicalBaseUrl: string;
}

export interface SubscribeButton {
  subscribeButtonRenderer: SubscribeButtonRenderer;
}

export interface SubscribeButtonRenderer {
  buttonText:                   LivingstoneSouthernWhiteFacedOwl;
  subscribed:                   boolean;
  enabled:                      boolean;
  type:                         string;
  channelId:                    string;
  showPreferences:              boolean;
  subscribedButtonText:         LivingstoneSouthernWhiteFacedOwl;
  unsubscribedButtonText:       LivingstoneSouthernWhiteFacedOwl;
  trackingParams:               string;
  unsubscribeButtonText:        LivingstoneSouthernWhiteFacedOwl;
  subscribeAccessibility:       SubscribeAccessibilityClass;
  unsubscribeAccessibility:     SubscribeAccessibilityClass;
  notificationPreferenceButton: NotificationPreferenceButton;
  subscribedEntityKey:          string;
  onSubscribeEndpoints:         OnSubscribeEndpoint[];
  onUnsubscribeEndpoints:       OnUnsubscribeEndpoint[];
}

export interface NotificationPreferenceButton {
  subscriptionNotificationToggleButtonRenderer: SubscriptionNotificationToggleButtonRenderer;
}

export interface SubscriptionNotificationToggleButtonRenderer {
  states:         State[];
  currentStateId: number;
  trackingParams: string;
  command:        SubscriptionNotificationToggleButtonRendererCommand;
  targetId:       string;
}

export interface SubscriptionNotificationToggleButtonRendererCommand {
  clickTrackingParams:    string;
  commandExecutorCommand: CommandExecutorCommand;
}

export interface CommandExecutorCommand {
  commands: CommandExecutorCommandCommand[];
}

export interface CommandExecutorCommandCommand {
  clickTrackingParams: string;
  openPopupAction:     StickyOpenPopupAction;
}

export interface StickyOpenPopupAction {
  popup:     StickyPopup;
  popupType: string;
}

export interface StickyPopup {
  menuPopupRenderer: FluffyMenuPopupRenderer;
}

export interface FluffyMenuPopupRenderer {
  items: FluffyItem[];
}

export interface FluffyItem {
  menuServiceItemRenderer: FluffyMenuServiceItemRenderer;
}

export interface FluffyMenuServiceItemRenderer {
  text:            Title;
  icon:            IconImageClass;
  serviceEndpoint: StickyServiceEndpoint;
  trackingParams:  string;
  isSelected:      boolean;
}

export interface StickyServiceEndpoint {
  clickTrackingParams:                         string;
  commandMetadata:                             OnBusinessEmailRevealClickCommandCommandMetadata;
  modifyChannelNotificationPreferenceEndpoint: Endpoint;
}

export interface State {
  stateId:     number;
  nextStateId: number;
  state:       VoiceSearchButton;
}

export interface OnSubscribeEndpoint {
  clickTrackingParams: string;
  commandMetadata:     OnBusinessEmailRevealClickCommandCommandMetadata;
  subscribeEndpoint:   SubscribeEndpoint;
}

export interface OnUnsubscribeEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       CommandCommandMetadata;
  signalServiceEndpoint: OnUnsubscribeEndpointSignalServiceEndpoint;
}

export interface OnUnsubscribeEndpointSignalServiceEndpoint {
  signal:  string;
  actions: StickyAction[];
}

export interface StickyAction {
  clickTrackingParams: string;
  openPopupAction:     IndigoOpenPopupAction;
}

export interface IndigoOpenPopupAction {
  popup:     IndigoPopup;
  popupType: string;
}

export interface IndigoPopup {
  confirmDialogRenderer: FluffyConfirmDialogRenderer;
}

export interface FluffyConfirmDialogRenderer {
  trackingParams:  string;
  dialogMessages:  LivingstoneSouthernWhiteFacedOwl[];
  confirmButton:   A11YSkipNavigationButtonClass;
  cancelButton:    A11YSkipNavigationButtonClass;
  primaryIsCancel: boolean;
}

export interface SubscriberCountText {
  accessibility: SubscribeAccessibilityClass;
  simpleText:    string;
}

export interface VisitTracking {
  remarketingPing: string;
}

export interface Metadata {
  channelMetadataRenderer: ChannelMetadataRenderer;
}

export interface ChannelMetadataRenderer {
  title:                  string;
  description:            string;
  rssUrl:                 string;
  channelConversionUrl:   string;
  externalId:             string;
  keywords:               string;
  ownerUrls:              string[];
  avatar:                 BannerClass;
  channelUrl:             string;
  isFamilySafe:           boolean;
  facebookProfileId:      string;
  availableCountryCodes:  string[];
  androidDeepLink:        string;
  androidAppindexingLink: string;
  iosAppindexingLink:     string;
  vanityChannelUrl:       string;
}

export interface Microformat {
  microformatDataRenderer: MicroformatDataRenderer;
}

export interface MicroformatDataRenderer {
  urlCanonical:       string;
  title:              string;
  description:        string;
  thumbnail:          BannerClass;
  siteName:           string;
  appName:            string;
  androidPackage:     string;
  iosAppStoreId:      string;
  iosAppArguments:    string;
  ogType:             string;
  urlApplinksWeb:     string;
  urlApplinksIos:     string;
  urlApplinksAndroid: string;
  urlTwitterIos:      string;
  urlTwitterAndroid:  string;
  twitterCardType:    string;
  twitterSiteHandle:  string;
  schemaDotOrgType:   string;
  noindex:            boolean;
  unlisted:           boolean;
  familySafe:         boolean;
  tags:               string[];
  availableCountries: string[];
  linkAlternates:     LinkAlternate[];
}

export interface LinkAlternate {
  hrefUrl: string;
}

export interface OnResponseReceivedAction {
  clickTrackingParams:            string;
  resetChannelUnreadCountCommand: ResetChannelUnreadCountCommand;
}

export interface ResetChannelUnreadCountCommand {
  channelId: string;
}

export interface ResponseContext {
  serviceTrackingParams:           ServiceTrackingParam[];
  maxAgeSeconds:                   number;
  mainAppWebResponseContext:       MainAppWebResponseContext;
  webResponseContextExtensionData: WebResponseContextExtensionData;
}

export interface MainAppWebResponseContext {
  datasyncId: string;
  loggedOut:  boolean;
}

export interface ServiceTrackingParam {
  service: string;
  params:  Param[];
}

export interface Param {
  key:   string;
  value: string;
}

export interface WebResponseContextExtensionData {
  ytConfigData: YtConfigData;
  hasDecorated: boolean;
}

export interface YtConfigData {
  visitorData:           string;
  sessionIndex:          number;
  rootVisualElementType: number;
}

export interface Topbar {
  desktopTopbarRenderer: DesktopTopbarRenderer;
}

export interface DesktopTopbarRenderer {
  logo:                     Logo;
  searchbox:                Searchbox;
  trackingParams:           string;
  countryCode:              string;
  topbarButtons:            TopbarButton[];
  hotkeyDialog:             HotkeyDialog;
  backButton:               BackButtonClass;
  forwardButton:            BackButtonClass;
  a11ySkipNavigationButton: A11YSkipNavigationButtonClass;
  voiceSearchButton:        VoiceSearchButton;
}

export interface BackButtonClass {
  buttonRenderer: BackButtonButtonRenderer;
}

export interface BackButtonButtonRenderer {
  trackingParams: string;
  command:        ButtonRendererCommand;
}

export interface HotkeyDialog {
  hotkeyDialogRenderer: HotkeyDialogRenderer;
}

export interface HotkeyDialogRenderer {
  title:          LivingstoneSouthernWhiteFacedOwl;
  sections:       HotkeyDialogRendererSection[];
  dismissButton:  A11YSkipNavigationButtonClass;
  trackingParams: string;
}

export interface HotkeyDialogRendererSection {
  hotkeyDialogSectionRenderer: HotkeyDialogSectionRenderer;
}

export interface HotkeyDialogSectionRenderer {
  title:   LivingstoneSouthernWhiteFacedOwl;
  options: Option[];
}

export interface Option {
  hotkeyDialogSectionOptionRenderer: HotkeyDialogSectionOptionRenderer;
}

export interface HotkeyDialogSectionOptionRenderer {
  label:                     LivingstoneSouthernWhiteFacedOwl;
  hotkey:                    string;
  hotkeyAccessibilityLabel?: SubscribeAccessibilityClass;
}

export interface Logo {
  topbarLogoRenderer: TopbarLogoRenderer;
}

export interface TopbarLogoRenderer {
  iconImage:         IconImageClass;
  tooltipText:       LivingstoneSouthernWhiteFacedOwl;
  endpoint:          TopbarLogoRendererEndpoint;
  trackingParams:    string;
  overrideEntityKey: string;
}

export interface TopbarLogoRendererEndpoint {
  clickTrackingParams: string;
  commandMetadata:     EndpointCommandMetadata;
  browseEndpoint:      FluffyBrowseEndpoint;
}

export interface FluffyBrowseEndpoint {
  browseId: string;
}

export interface Searchbox {
  fusionSearchboxRenderer: FusionSearchboxRenderer;
}

export interface FusionSearchboxRenderer {
  icon:            IconImageClass;
  placeholderText: LivingstoneSouthernWhiteFacedOwl;
  config:          Config;
  trackingParams:  string;
  searchEndpoint:  FusionSearchboxRendererSearchEndpoint;
  clearButton:     VoiceSearchButton;
}

export interface Config {
  webSearchboxConfig: WebSearchboxConfig;
}

export interface WebSearchboxConfig {
  requestLanguage:     string;
  requestDomain:       string;
  hasOnscreenKeyboard: boolean;
  focusSearchbox:      boolean;
}

export interface FusionSearchboxRendererSearchEndpoint {
  clickTrackingParams: string;
  commandMetadata:     EndpointCommandMetadata;
  searchEndpoint:      SearchEndpointSearchEndpoint;
}

export interface SearchEndpointSearchEndpoint {
  query: string;
}

export interface TopbarButton {
  topbarMenuButtonRenderer?:         TopbarMenuButtonRenderer;
  notificationTopbarButtonRenderer?: NotificationTopbarButtonRenderer;
}

export interface NotificationTopbarButtonRenderer {
  icon:                      IconImageClass;
  menuRequest:               MenuRequest;
  style:                     string;
  trackingParams:            string;
  accessibility:             SubscribeAccessibilityClass;
  tooltip:                   string;
  updateUnseenCountEndpoint: UpdateUnseenCountEndpoint;
  notificationCount:         number;
  handlerDatas:              string[];
}

export interface MenuRequest {
  clickTrackingParams:   string;
  commandMetadata:       OnBusinessEmailRevealClickCommandCommandMetadata;
  signalServiceEndpoint: MenuRequestSignalServiceEndpoint;
}

export interface MenuRequestSignalServiceEndpoint {
  signal:  string;
  actions: CommandElement[];
}

export interface UpdateUnseenCountEndpoint {
  clickTrackingParams:   string;
  commandMetadata:       OnBusinessEmailRevealClickCommandCommandMetadata;
  signalServiceEndpoint: Signal;
}

export interface TopbarMenuButtonRenderer {
  icon?:          IconImageClass;
  menuRenderer?:  MenuRenderer;
  trackingParams: string;
  accessibility:  SubscribeAccessibilityClass;
  tooltip:        string;
  style?:         Style;
  targetId?:      string;
  avatar?:        TopbarMenuButtonRendererAvatar;
  menuRequest?:   MenuRequest;
}

export interface TopbarMenuButtonRendererAvatar {
  thumbnails:    AvatarThumbnail[];
  accessibility: SubscribeAccessibilityClass;
}

export interface MenuRenderer {
  multiPageMenuRenderer: MenuRendererMultiPageMenuRenderer;
}

export interface MenuRendererMultiPageMenuRenderer {
  sections:       MultiPageMenuRendererSection[];
  trackingParams: string;
  style:          string;
}

export interface MultiPageMenuRendererSection {
  multiPageMenuSectionRenderer: MultiPageMenuSectionRenderer;
}

export interface MultiPageMenuSectionRenderer {
  items:          MultiPageMenuSectionRendererItem[];
  trackingParams: string;
}

export interface MultiPageMenuSectionRendererItem {
  compactLinkRenderer: CompactLinkRenderer;
}

export interface CompactLinkRenderer {
  icon:               IconImageClass;
  title:              LivingstoneSouthernWhiteFacedOwl;
  navigationEndpoint: CompactLinkRendererNavigationEndpoint;
  trackingParams:     string;
  style?:             string;
}

export interface CompactLinkRendererNavigationEndpoint {
  clickTrackingParams:       string;
  commandMetadata:           EndpointCommandMetadata;
  uploadEndpoint?:           UploadEndpoint;
  signalNavigationEndpoint?: Signal;
  urlEndpoint?:              FluffyURLEndpoint;
}

export interface UploadEndpoint {
  hack: boolean;
}

export interface FluffyURLEndpoint {
  url:    string;
  target: string;
}